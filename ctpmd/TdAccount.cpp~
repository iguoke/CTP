#include "../include/TdAccount.h"
#include "../include/Main.h"
#include <string.h>
#include <vector>
#include <stdlib.h>
#include <iostream>
using namespace std;
char MapDirection(char src, bool toOrig);
char MapOffset(char src, bool toOrig);
///当客户端与交易后台建立起通信连接时（还未登录前），该方法被调用。
void TdSpi:: OnFrontConnected()
{
	this->Event_OnFrontConnected.Trigger();
}
	
/////当客户端与交易后台通信连接断开时，该方法被调用。当发生这个情况后，API会自动重新连接，客户端可不做处理。
/////@param nReason 错误原因
/////        0x1001 网络读失败
/////        0x1002 网络写失败
/////        0x2001 接收心跳超时
/////        0x2002 发送心跳失败
/////        0x2003 收到错误报文
void TdSpi:: OnFrontDisconnected(int nReason)
{
	this->Event_OnFrontDisconnected.Trigger((ObejctSender *)nReason);
}
//		
/////心跳超时警告。当长时间未收到报文时，该方法被调用。
/////@param nTimeLapse 距离上次接收报文的时间
//void TdSpi:: OnHeartBeatWarning(int nTimeLapse)
//{
//	this->Event_OnHeartBeatWarning.Trigger((ObejctSender *)nTimeLapse);
//}
//	
/////客户端认证响应
//void TdSpi:: OnRspAuthenticate(CThostFtdcRspAuthenticateField *pRspAuthenticateField, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//	
//
/////登录请求响应
//void TdSpi:: OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
//{
//	 if (!IsErrorRspInfo(pRspInfo) && pRspUserLogin)
//	 {
//		this->Event_OnRspUserLogin.Trigger((ObejctSender *)pRspUserLogin,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
//	 }
//}
//
/////登出请求响应
//void TdSpi:: OnRspUserLogout(CThostFtdcUserLogoutField *pUserLogout, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) 
//{
//	if (!IsErrorRspInfo(pRspInfo) && pUserLogout)
//	 {
//		this->Event_OnRspUserLogout.Trigger((ObejctSender *)pUserLogout,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
//	}
//}
//
/////用户口令更新请求响应
//void TdSpi:: OnRspUserPasswordUpdate(CThostFtdcUserPasswordUpdateField *pUserPasswordUpdate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////资金账户口令更新请求响应
//void TdSpi:: OnRspTradingAccountPasswordUpdate(CThostFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////报单录入请求响应
//void TdSpi:: OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
//{
//	if (!IsErrorRspInfo(pRspInfo) && pInputOrder)
//	 {
//		this->Event_OnRspOrderInsert.Trigger((ObejctSender *)pInputOrder,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
//	}	
//}
//
//////预埋单录入请求响应
//void TdSpi:: OnRspParkedOrderInsert(CThostFtdcParkedOrderField *pParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
////预埋撤单录入请求响应
//void TdSpi:: OnRspParkedOrderAction(CThostFtdcParkedOrderActionField *pParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////报单操作请求响应
//void TdSpi:: OnRspOrderAction(CThostFtdcInputOrderActionField *pInputOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) 
//{
//	if (!IsErrorRspInfo(pRspInfo) && pInputOrderAction)
//	 {
//		this->Event_OnRspOrderAction.Trigger((ObejctSender *)pInputOrderAction,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
//	 }
//}
//
/////查询最大报单数量响应
//void TdSpi:: OnRspQueryMaxOrderVolume(CThostFtdcQueryMaxOrderVolumeField *pQueryMaxOrderVolume, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////投资者结算结果确认响应
//void TdSpi:: OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////删除预埋单响应
//void TdSpi:: OnRspRemoveParkedOrder(CThostFtdcRemoveParkedOrderField *pRemoveParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////删除预埋撤单响应
//void TdSpi:: OnRspRemoveParkedOrderAction(CThostFtdcRemoveParkedOrderActionField *pRemoveParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////执行宣告录入请求响应
////void TdSpi:: OnRspExecOrderInsert(CThostFtdcInputExecOrderField *pInputExecOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////执行宣告操作请求响应
////void TdSpi:: OnRspExecOrderAction(CThostFtdcInputExecOrderActionField *pInputExecOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////询价录入请求响应
////void TdSpi:: OnRspForQuoteInsert(CThostFtdcInputForQuoteField *pInputForQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////报价录入请求响应
////void TdSpi:: OnRspQuoteInsert(CThostFtdcInputQuoteField *pInputQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////报价操作请求响应
////void TdSpi:: OnRspQuoteAction(CThostFtdcInputQuoteActionField *pInputQuoteAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询报单响应
////void TdSpi:: OnRspQryOrder(CThostFtdcOrderField *pOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast)
////{
////	if (!IsErrorRspInfo(pRspInfo) && pOrder)
////	 {
////		this->Event_OnRspQryOrder.Trigger((ObejctSender *)pOrder,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
////	}
////}
////
///////请求查询成交响应
////void TdSpi:: OnRspQryTrade(CThostFtdcTradeField *pTrade, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) 
////{
////	if (!IsErrorRspInfo(pRspInfo) && pTrade)
////	 {
////		this->Event_OnRspQryTrade.Trigger((ObejctSender *)pTrade,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
////	}
////	
////}
////
///////请求查询投资者持仓响应
////void TdSpi:: OnRspQryInvestorPosition(CThostFtdcInvestorPositionField *pInvestorPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询资金账户响应
////void TdSpi:: OnRspQryTradingAccount(CThostFtdcTradingAccountField *pTradingAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询投资者响应
////void TdSpi:: OnRspQryInvestor(CThostFtdcInvestorField *pInvestor, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询交易编码响应
////void TdSpi:: OnRspQryTradingCode(CThostFtdcTradingCodeField *pTradingCode, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询合约保证金率响应
////void TdSpi:: OnRspQryInstrumentMarginRate(CThostFtdcInstrumentMarginRateField *pInstrumentMarginRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询合约手续费率响应
////void TdSpi:: OnRspQryInstrumentCommissionRate(CThostFtdcInstrumentCommissionRateField *pInstrumentCommissionRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询交易所响应
////void TdSpi:: OnRspQryExchange(CThostFtdcExchangeField *pExchange, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询产品响应
////void TdSpi:: OnRspQryProduct(CThostFtdcProductField *pProduct, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
//
/////请求查询合约响应
//void TdSpi:: OnRspQryInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) 
//{
//	if (!IsErrorRspInfo(pRspInfo) && pInstrument)
//	 {
//		this->Event_OnRspQryInstrument.Trigger((ObejctSender *)pInstrument,(ObejctSender *)nRequestID,(ObejctSender *)bIsLast);
//	}
//}
///////请求查询行情响应
////void TdSpi:: OnRspQryDepthMarketData(CThostFtdcDepthMarketDataField *pDepthMarketData, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询投资者结算结果响应
////void TdSpi:: OnRspQrySettlementInfo(CThostFtdcSettlementInfoField *pSettlementInfo, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询转帐银行响应
////void TdSpi:: OnRspQryTransferBank(CThostFtdcTransferBankField *pTransferBank, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询投资者持仓明细响应
////void TdSpi:: OnRspQryInvestorPositionDetail(CThostFtdcInvestorPositionDetailField *pInvestorPositionDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询客户通知响应
////void TdSpi:: OnRspQryNotice(CThostFtdcNoticeField *pNotice, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询结算信息确认响应
////void TdSpi:: OnRspQrySettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询投资者持仓明细响应
////void TdSpi:: OnRspQryInvestorPositionCombineDetail(CThostFtdcInvestorPositionCombineDetailField *pInvestorPositionCombineDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////查询保证金监管系统经纪公司资金账户密钥响应
////void TdSpi:: OnRspQryCFMMCTradingAccountKey(CThostFtdcCFMMCTradingAccountKeyField *pCFMMCTradingAccountKey, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询仓单折抵信息响应
////void TdSpi:: OnRspQryEWarrantOffset(CThostFtdcEWarrantOffsetField *pEWarrantOffset, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询投资者品种/跨品种保证金响应
////void TdSpi:: OnRspQryInvestorProductGroupMargin(CThostFtdcInvestorProductGroupMarginField *pInvestorProductGroupMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询交易所保证金率响应
////void TdSpi:: OnRspQryExchangeMarginRate(CThostFtdcExchangeMarginRateField *pExchangeMarginRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询交易所调整保证金率响应
////void TdSpi:: OnRspQryExchangeMarginRateAdjust(CThostFtdcExchangeMarginRateAdjustField *pExchangeMarginRateAdjust, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询汇率响应
////void TdSpi:: OnRspQryExchangeRate(CThostFtdcExchangeRateField *pExchangeRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询二级代理操作员银期权限响应
////void TdSpi:: OnRspQrySecAgentACIDMap(CThostFtdcSecAgentACIDMapField *pSecAgentACIDMap, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询期权交易成本响应
////void TdSpi:: OnRspQryOptionInstrTradeCost(CThostFtdcOptionInstrTradeCostField *pOptionInstrTradeCost, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询期权合约手续费响应
////void TdSpi:: OnRspQryOptionInstrCommRate(CThostFtdcOptionInstrCommRateField *pOptionInstrCommRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询执行宣告响应
////void TdSpi:: OnRspQryExecOrder(CThostFtdcExecOrderField *pExecOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询询价响应
////void TdSpi:: OnRspQryForQuote(CThostFtdcForQuoteField *pForQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询报价响应
////void TdSpi:: OnRspQryQuote(CThostFtdcQuoteField *pQuote, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询转帐流水响应
////void TdSpi:: OnRspQryTransferSerial(CThostFtdcTransferSerialField *pTransferSerial, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询银期签约关系响应
////void TdSpi:: OnRspQryAccountregister(CThostFtdcAccountregisterField *pAccountregister, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
/////错误应答
//void TdSpi:: OnRspError(CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) 
//{
//	IsErrorRspInfo(pRspInfo);
//}
//
/////报单通知
//void TdSpi:: OnRtnOrder(CThostFtdcOrderField *pOrder)
//{
//	this->Event_OnRtnOrder.Trigger((ObejctSender *)pOrder);
//	
//}
//
/////成交通知
//void TdSpi:: OnRtnTrade(CThostFtdcTradeField *pTrade) 
//{
//	this->Event_OnRtnTrade.Trigger((ObejctSender *)pTrade);
//	
//}
////
///////报单录入错误回报
////void TdSpi:: OnErrRtnOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo) 
////{
////	if (!IsErrorRspInfo(pRspInfo) && pInputOrder)
////	 {
////		this->Event_OnErrRtnOrderInsert.Trigger((ObejctSender *)pInputOrder);
////	}
////	
////}
////
///////报单操作错误回报
////void TdSpi:: OnErrRtnOrderAction(CThostFtdcOrderActionField *pOrderAction, CThostFtdcRspInfoField *pRspInfo)
////{
////	if (!IsErrorRspInfo(pRspInfo) && pOrderAction)
////	 {
////		this->Event_OnErrRtnOrderAction.Trigger((ObejctSender *)pOrderAction);
////	}
////	
////}
////
///////合约交易状态通知
////void TdSpi:: OnRtnInstrumentStatus(CThostFtdcInstrumentStatusField *pInstrumentStatus) {}
////
///////交易通知
////void TdSpi:: OnRtnTradingNotice(CThostFtdcTradingNoticeInfoField *pTradingNoticeInfo) {}
////
///////提示条件单校验错误
////void TdSpi:: OnRtnErrorConditionalOrder(CThostFtdcErrorConditionalOrderField *pErrorConditionalOrder) {}
////
///////执行宣告通知
////void TdSpi:: OnRtnExecOrder(CThostFtdcExecOrderField *pExecOrder) {}
////
///////执行宣告录入错误回报
////void TdSpi:: OnErrRtnExecOrderInsert(CThostFtdcInputExecOrderField *pInputExecOrder, CThostFtdcRspInfoField *pRspInfo) {}
////
///////执行宣告操作错误回报
////void TdSpi:: OnErrRtnExecOrderAction(CThostFtdcExecOrderActionField *pExecOrderAction, CThostFtdcRspInfoField *pRspInfo) {}
////
///////询价录入错误回报
////void TdSpi:: OnErrRtnForQuoteInsert(CThostFtdcInputForQuoteField *pInputForQuote, CThostFtdcRspInfoField *pRspInfo) {}
////
///////报价通知
////void TdSpi:: OnRtnQuote(CThostFtdcQuoteField *pQuote) {}
////
///////报价录入错误回报
////void TdSpi:: OnErrRtnQuoteInsert(CThostFtdcInputQuoteField *pInputQuote, CThostFtdcRspInfoField *pRspInfo) {}
////
///////报价操作错误回报
////void TdSpi:: OnErrRtnQuoteAction(CThostFtdcQuoteActionField *pQuoteAction, CThostFtdcRspInfoField *pRspInfo) {}
////
///////询价通知
////void TdSpi:: OnRtnForQuoteRsp(CThostFtdcForQuoteRspField *pForQuoteRsp) {}
////
///////请求查询签约银行响应
////void TdSpi:: OnRspQryContractBank(CThostFtdcContractBankField *pContractBank, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询预埋单响应
////void TdSpi:: OnRspQryParkedOrder(CThostFtdcParkedOrderField *pParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询预埋撤单响应
////void TdSpi:: OnRspQryParkedOrderAction(CThostFtdcParkedOrderActionField *pParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询交易通知响应
////void TdSpi:: OnRspQryTradingNotice(CThostFtdcTradingNoticeField *pTradingNotice, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询经纪公司交易参数响应
////void TdSpi:: OnRspQryBrokerTradingParams(CThostFtdcBrokerTradingParamsField *pBrokerTradingParams, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////请求查询经纪公司交易算法响应
////void TdSpi:: OnRspQryBrokerTradingAlgos(CThostFtdcBrokerTradingAlgosField *pBrokerTradingAlgos, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////银行发起银行资金转期货通知
////void TdSpi:: OnRtnFromBankToFutureByBank(CThostFtdcRspTransferField *pRspTransfer) {}
////
///////银行发起期货资金转银行通知
////void TdSpi:: OnRtnFromFutureToBankByBank(CThostFtdcRspTransferField *pRspTransfer) {}
////
///////银行发起冲正银行转期货通知
////void TdSpi:: OnRtnRepealFromBankToFutureByBank(CThostFtdcRspRepealField *pRspRepeal) {}
////
///////银行发起冲正期货转银行通知
////void TdSpi:: OnRtnRepealFromFutureToBankByBank(CThostFtdcRspRepealField *pRspRepeal) {}
////
///////期货发起银行资金转期货通知
////void TdSpi:: OnRtnFromBankToFutureByFuture(CThostFtdcRspTransferField *pRspTransfer) {}
////
///////期货发起期货资金转银行通知
////void TdSpi:: OnRtnFromFutureToBankByFuture(CThostFtdcRspTransferField *pRspTransfer) {}
////
///////系统运行时期货端手工发起冲正银行转期货请求，银行处理完毕后报盘发回的通知
////void TdSpi:: OnRtnRepealFromBankToFutureByFutureManual(CThostFtdcRspRepealField *pRspRepeal) {}
////
///////系统运行时期货端手工发起冲正期货转银行请求，银行处理完毕后报盘发回的通知
////void TdSpi:: OnRtnRepealFromFutureToBankByFutureManual(CThostFtdcRspRepealField *pRspRepeal) {}
////
///////期货发起查询银行余额通知
////void TdSpi:: OnRtnQueryBankBalanceByFuture(CThostFtdcNotifyQueryAccountField *pNotifyQueryAccount) {}
////
///////期货发起银行资金转期货错误回报
////void TdSpi:: OnErrRtnBankToFutureByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo) {}
////
///////期货发起期货资金转银行错误回报
////void TdSpi:: OnErrRtnFutureToBankByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo) {}
////
///////系统运行时期货端手工发起冲正银行转期货错误回报
////void TdSpi:: OnErrRtnRepealBankToFutureByFutureManual(CThostFtdcReqRepealField *pReqRepeal, CThostFtdcRspInfoField *pRspInfo) {}
////
///////系统运行时期货端手工发起冲正期货转银行错误回报
////void TdSpi:: OnErrRtnRepealFutureToBankByFutureManual(CThostFtdcReqRepealField *pReqRepeal, CThostFtdcRspInfoField *pRspInfo) {}
////
///////期货发起查询银行余额错误回报
////void TdSpi:: OnErrRtnQueryBankBalanceByFuture(CThostFtdcReqQueryAccountField *pReqQueryAccount, CThostFtdcRspInfoField *pRspInfo) {}
////
///////期货发起冲正银行转期货请求，银行处理完毕后报盘发回的通知
////void TdSpi:: OnRtnRepealFromBankToFutureByFuture(CThostFtdcRspRepealField *pRspRepeal) {}
////
///////期货发起冲正期货转银行请求，银行处理完毕后报盘发回的通知
////void TdSpi:: OnRtnRepealFromFutureToBankByFuture(CThostFtdcRspRepealField *pRspRepeal) {}
////
///////期货发起银行资金转期货应答
////void TdSpi:: OnRspFromBankToFutureByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////期货发起期货资金转银行应答
////void TdSpi:: OnRspFromFutureToBankByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////期货发起查询银行余额应答
////void TdSpi:: OnRspQueryBankAccountMoneyByFuture(CThostFtdcReqQueryAccountField *pReqQueryAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {}
////
///////银行发起银期开户通知
////void TdSpi:: OnRtnOpenAccountByBank(CThostFtdcOpenAccountField *pOpenAccount) {}
////
///////银行发起银期销户通知
////void TdSpi:: OnRtnCancelAccountByBank(CThostFtdcCancelAccountField *pCancelAccount) {}
////
///////银行发起变更银行账号通知
////void TdSpi:: OnRtnChangeAccountByBank(CThostFtdcChangeAccountField *pChangeAccount) {}
//bool TdSpi::IsErrorRspInfo(CThostFtdcRspInfoField *pRspInfo)
//{
//	// 如果ErrorID != 0, 说明收到了错误的响应
//	bool ret = ((pRspInfo) && (pRspInfo->ErrorID != 0));
//  if (ret)
//  {
//	  this->Event_OnRspError.Trigger((ObejctSender *)pRspInfo);
//  }
//	return ret;
//}*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void TdApi::TdConnect(TdSpi *tdspi,char * addr)
{
    //this->td_UserApi=(CThostFtdcTraderApi*)malloc(sizeof(CThostFtdcTraderApi));
	//CThostFtdcTraderApi::CreateFtdcTraderApi("TD");
	this->td_UserApi=CThostFtdcTraderApi::CreateFtdcTraderApi();
	/*this->td_UserApi->RegisterSpi(tdspi);			 // 回调对象注入接口类
	this->td_UserApi->SubscribePublicTopic(THOST_TERT_QUICK);	//THOST_TERT_RESUME,THOST_TERT_QUICK// 注册公有流
    this->td_UserApi->SubscribePrivateTopic(THOST_TERT_QUICK);	
	this->td_UserApi->RegisterFront(addr);		     // 注册行情前置地址
	this->td_UserApi->Init();      //接口线程启动, 开始工作
  */
	//this->td_UserApi->Join();      //等待接口线程退出
	//this->md_UserApi->Release()
}
/*int TdApi::ReqUserLogin(TThostFtdcBrokerIDType	appId,TThostFtdcUserIDType	userId,	TThostFtdcPasswordType	passwd)
{
	strcpy(this->BrokerID, appId);
	strcpy(this->InvestorID, userId);
	strcpy(this->Password, passwd);
	CThostFtdcReqUserLoginField req;

	memset(&req, 0, sizeof(req));
	strcpy(req.BrokerID, appId);
	strcpy(req.UserID, userId);
	strcpy(req.Password, passwd);
	return this->td_UserApi->ReqUserLogin(&req, ++requestId);
}
int TdApi::ReqUserLogout()
{
	CThostFtdcUserLogoutField req;
	memset(&req, 0, sizeof(req));
	strcpy(req.BrokerID, this->BrokerID);
	strcpy(req.UserID, this->InvestorID);
	
	return this->td_UserApi->ReqUserLogout(&req, ++requestId);
}
int TdApi::ReqSettlementInfoConfirm()
{
	CThostFtdcSettlementInfoConfirmField req;
	memset(&req, 0, sizeof(req));
	strcpy(req.BrokerID, this->BrokerID);
	strcpy(req.InvestorID, this->InvestorID);
	return this->td_UserApi->ReqSettlementInfoConfirm(&req, ++requestId);
	
}
int TdApi::ReqQryInstrument(TThostFtdcInstrumentIDType instId)
{
	CThostFtdcQryInstrumentField req;
	memset(&req, 0, sizeof(req));
	strcpy(req.InstrumentID, instId);//为空表示查询所有合约
	return td_UserApi->ReqQryInstrument(&req, ++requestId);
}
int TdApi::Join()
{
	return td_UserApi->Join();
}
int TdApi::ReqOrderInsert(TThostFtdcInstrumentIDType instId,TThostFtdcDirectionType dir, char kpp,TThostFtdcPriceType price,   TThostFtdcVolumeType vol)
{
	CThostFtdcInputOrderField req;
	//memset(&req1, 0, sizeof(req1));	
	memset(&req, 0, sizeof(req));	
	strcpy(req.BrokerID, this->BrokerID);  //应用单元代码	
	strcpy(req.InvestorID,this->InvestorID); //投资者代码	
	strcpy(req.InstrumentID, instId); //合约代码	
	//strcpy(req.OrderRef, "Auto");  //报单引用
  //int nextOrderRef = atoi(OrderRef);
  //sprintf(OrderRef, "%d", ++nextOrderRef);
  
  req.LimitPrice = price;	//价格
  if(0==req.LimitPrice){
	  req.OrderPriceType = THOST_FTDC_OPT_AnyPrice;//价格类型=市价
	  req.TimeCondition = THOST_FTDC_TC_IOC;//有效期类型:立即完成，否则撤销
  }else{
    req.OrderPriceType = THOST_FTDC_OPT_LimitPrice;//价格类型=限价	
    req.TimeCondition = THOST_FTDC_TC_GFD;  //有效期类型:当日有效
  }
  req.Direction = MapDirection(dir,true);  //买卖方向	
	req.CombOffsetFlag[0] = MapOffset(kpp,true); //组合开平标志:开仓
	req.CombHedgeFlag[0] =THOST_FTDC_HF_Speculation;//投机//THOST_FTDC_HF_Arbitrage;//套利 	
	req.VolumeTotalOriginal = vol;	///数量		
	req.VolumeCondition = THOST_FTDC_VC_AV; //成交量类型:任何数量
	req.MinVolume = 1;	//最小成交量:1	
	req.ContingentCondition = THOST_FTDC_CC_Immediately;  //触发条件:立即
	
  //TThostFtdcPriceType	StopPrice;  //止损价
	req.ForceCloseReason = THOST_FTDC_FCC_NotForceClose;	//强平原因:非强平	
	req.IsAutoSuspend = 0;  //自动挂起标志:否	
	req.UserForceClose = 0;   //用户强评标志:否

	return td_UserApi->ReqOrderInsert(&req, ++requestId);
}
int TdApi::ReqOrderAction(CThostFtdcOrderField order)
{
	CThostFtdcInputOrderActionField req;
	memset(&req, 0, sizeof(req));
	strcpy(req.BrokerID, this->BrokerID);   //经纪公司代码	
	strcpy(req.InvestorID, this->InvestorID); //投资者代码
	//strcpy(req.OrderRef, pOrderRef); //报单引用	
	//req.FrontID = frontId;           //前置编号	
	//req.SessionID = sessionId;       //会话编号
	
  strcpy(req.ExchangeID, order.ExchangeID);
  strcpy(req.OrderSysID, order.OrderSysID);
	req.ActionFlag = THOST_FTDC_AF_Delete;  //操作标志 
	return td_UserApi->ReqOrderAction(&req, ++requestId);
}*/
char MapDirection(char src, bool toOrig=true)
{
  if(toOrig)
  {
    if('b'==src||'B'==src)
	{
		src='0';
	}
	else if('s'==src||'S'==src)
	{
		src='1';
	}
  }
  else
  {
    if('0'==src)
	{
		src='B';
	}
	else if('1'==src)
	{
		src='S';
	}
  }
  return src;
}
char MapOffset(char src, bool toOrig=true)
{
  if(toOrig)
  {
    if('o'==src||'O'==src)
	{
		src='0';
	}
    else if('c'==src||'C'==src)
	{
		src='1';
	}
    else if('j'==src||'J'==src)
	{
		src='3';
	}
  }
  else
  {
    if('0'==src)
	{
		src='O';
	}
    else if('1'==src)
	{
		src='C';
	}
    else if('3'==src)
	{
		src='J';
	}
  }
  return src;
}
